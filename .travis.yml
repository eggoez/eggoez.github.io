language: ruby
rvm:
- 2.3.3

before_script:
 - chmod +x ./script/cibuild # or do this locally and commit

# Assume bundler is being used, therefore
# the `install` step will run `bundle install` by default.
script: ./script/cibuild

# branch whitelist, only for GitHub Pages
branches:
  only:
  - master     # test the gh-pages branch

env:
  global:
  - NOKOGIRI_USE_SYSTEM_LIBRARIES=true # speeds up installation of html-proofer

sudo: false # route your build to the container-based infrastructure for a faster build

Ok, now for an explanation of each line:

language: ruby

This line tells Travis to use a Ruby build container. It gives your script access to Bundler, RubyGems, and a Ruby runtime.

rvm:
- 2.3.3

RVM is a popular Ruby Version Manager (like rbenv, chruby, etc). This directive tells Travis the Ruby version to use when running your test script.

before_script:
 - chmod +x ./script/cibuild

The build script file needs to have the executable attribute set or Travis will fail with a permission denied error. You can also run this locally and commit the permissions directly, thus rendering this step irrelevant.

script: ./script/cibuild

Travis allows you to run any arbitrary shell script to test your site. One convention is to put all scripts for your project in the script directory, and to call your test script cibuild. This line is completely customizable. If your script won’t change much, you can write your test incantation here directly:

install: gem install jekyll html-proofer
script: jekyll build && htmlproofer ./_site

The script directive can be absolutely any valid shell command..

# branch whitelist, only for GitHub Pages
branches:
  only:
  - master     # test the gh-pages branch

You want to ensure the Travis builds for your site are being run only on the branch or branches which contain your site. One means of ensuring this isolation is including a branch whitelist in your Travis configuration file. By specifying the gh-pages branch, you will ensure the associated test script (discussed above) is only executed on site branches. If you use a pull request flow for proposing changes, you may wish to enforce a convention for your builds such that all branches containing edits are prefixed, exemplified above with the /pages-(.*)/ regular expression.

The branches directive is completely optional. Travis will build from every push to any branch of your repo if leave it out.

env:
  global:
  - NOKOGIRI_USE_SYSTEM_LIBRARIES=true # speeds up installation of html-proofer

Using html-proofer? You’ll want this environment variable. Nokogiri, used to parse HTML files in your compiled site, comes bundled with libraries which it must compile each time it is installed. Luckily, you can dramatically decrease the install time of Nokogiri by setting the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES to true.
Be sure to exclude vendor from your _config.yml

Travis bundles all gems in the vendor directory on its build servers, which Jekyll will mistakenly read and explode on.

exclude: [vendor]

By default you should supply the sudo: false command to Travis. This command explicitly tells Travis to run your build on Travis’s container-based infrastructure. Running on the container-based infrastructure can often times speed up your build. If you have any trouble with your build, or if your build does need sudo access, modify the line to sudo: required.

sudo: false

TroubleshootingPermalink

Travis error: “You are trying to install in deployment mode after changing your Gemfile. Run bundle install elsewhere and add the updated Gemfile.lock to version control.”

Workaround: Either run bundle install locally and commit your changes to Gemfile.lock, or remove the Gemfile.lock file from your repository and add an entry in the .gitignore file to avoid it from being checked in again.
Questions?Permalink

This entire guide is open-source. Go ahead and edit it if you have a fix or ask for help if you run into trouble and need some help.
Getting Started

    Welcome
    Quick-start guide
    Installation
    Jekyll on Windows
    Basic Usage
    Directory structure
    Configuration

Your Content

    Front Matter
    Writing posts
    Working with drafts
    Creating pages
    Static Files
    Variables
    Collections
    Data Files
    Assets
    Blog migrations

Customization

    Templates
    Includes
    Permalinks
    Pagination
    Plugins
    Themes
    Extras

Deployment

    GitHub Pages
    Deployment methods
    Continuous Integration

Miscellaneous

    Troubleshooting
    Sites using Jekyll
    Resources
    Upgrading from 0.x to 2.x
    Upgrading from 2.x to 3.x

Meta

    Contributing
    Maintaining Jekyll
    Code of Conduct
    History

